from pyzabbix import ZabbixAPI
from config import ZABBIX_URL, ZABBIX_USER, ZABBIX_PASSWORD
import logging
from datetime import datetime, timedelta
from collections import defaultdict
import pytz

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
INCLUDED_TAGS = [
    'scope: capacity', 'scope: performance', 'scope: notice', 'scope: security',
    'scope: availability', 'component: fra', 'oracle: blocks', 'transaction',
    'archive_log_depth', 'vimis: availability', 'remd: os', 'remd: job_status',
    'remd: all_success', 'remd: availability', 'epgu: session', 'epgu: availability',
    'remdfer: notice'
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
current_duty_officer = None

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_moscow_timestamp():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    return int(datetime.now(MOSCOW_TZ).timestamp())

def get_moscow_time_from_hours(hours):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ timestamp –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ X —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    return int((datetime.now(MOSCOW_TZ) - timedelta(hours=hours)).timestamp())

class ZabbixClient:
    def __init__(self):
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Zabbix API: {ZABBIX_URL}")
        self.zapi = ZabbixAPI(ZABBIX_URL)
        self.current_duty_officer = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        try:
            self.zapi.login(ZABBIX_USER, ZABBIX_PASSWORD)
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zabbix API")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Zabbix API: {e}", exc_info=True)
            raise

    def get_severity_name(self, severity):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        severity_map = {
            '0': 'üîµ –ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ',
            '1': '‚ö™ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            '2': 'üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            '3': 'üü† –°—Ä–µ–¥–Ω—è—è',
            '4': 'üî¥ –í—ã—Å–æ–∫–∞—è',
            '5': '‚ö´ –ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è'
        }
        return severity_map.get(severity, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    def filter_by_tags(self, events):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–µ–≥–∞–º"""
        filtered_events = []
        for event in events:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —Å–æ–±—ã—Ç–∏—è
                event_tags = self.zapi.event.get(
                    output=['eventid', 'tags'],
                    eventids=[event['eventid']],
                    selectTags=['tag', 'value']
                )
                
                if event_tags and event_tags[0].get('tags'):
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–≥–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    event_tag_names = [f"{tag['tag']}: {tag['value']}" for tag in event_tags[0]['tags']]
                    logger.info(f"–¢–µ–≥–∏ —Å–æ–±—ã—Ç–∏—è {event['eventid']}: {event_tag_names}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–±—ã—Ç–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π
                    has_included_tag = False
                    for event_tag in event_tag_names:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
                        normalized_event_tag = event_tag.strip().lower()
                        for included_tag in INCLUDED_TAGS:
                            normalized_included_tag = included_tag.strip().lower()
                            if normalized_event_tag == normalized_included_tag:
                                has_included_tag = True
                                logger.info(f"–°–æ–±—ã—Ç–∏–µ {event['eventid']} –≤–∫–ª—é—á–µ–Ω–æ (—Ç–µ–≥: {event_tag})")
                                break
                        if has_included_tag:
                            break
                    
                    if has_included_tag:
                        filtered_events.append(event)
                    else:
                        logger.info(f"–°–æ–±—ã—Ç–∏–µ {event['eventid']} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–µ–≥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π)")
                else:
                    logger.info(f"–°–æ–±—ã—Ç–∏–µ {event['eventid']} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–µ–≥–æ–≤)")
                    continue
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event.get('eventid')}: {e}", exc_info=True)
                continue
        
        logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ {len(events)}")
        return filtered_events

    def group_problems_by_host(self, problems):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ —Ö–æ—Å—Ç–∞–º"""
        host_problems = defaultdict(list)
        for problem in problems:
            try:
                host_info = self.zapi.host.get(
                    hostids=problem.get('hostid'),
                    output=['host', 'name']
                )
                if host_info:
                    host_name = host_info[0]['host']
                    host_problems[host_name].append(problem)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã {problem.get('objectid')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ: {e}")
                continue
        return dict(host_problems)

    def group_problems_by_severity(self, problems):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        severity_problems = defaultdict(list)
        for problem in problems:
            severity = problem.get('severity', '0')
            severity_name = self.get_severity_name(severity)
            severity_problems[severity_name].append(problem)
        return dict(severity_problems)

    def group_events_by_host(self, events):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ö–æ—Å—Ç–∞–º"""
        host_events = defaultdict(list)
        for event in events:
            try:
                host_info = self.zapi.host.get(
                    hostids=event.get('hostid'),
                    output=['host', 'name']
                )
                if host_info:
                    host_name = host_info[0]['host']
                    host_events[host_name].append(event)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.get('eventid')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ: {e}")
                continue
        return dict(host_events)

    def group_events_by_severity(self, events):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ —É—Ä–æ–≤–Ω—é –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        severity_events = defaultdict(list)
        for event in events:
            severity = event.get('severity', '0')
            severity_name = self.get_severity_name(severity)
            severity_events[severity_name].append(event)
        return dict(severity_events)

    def get_event_comments(self, event_id: str) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–±—ã—Ç–∏—é
        :param event_id: ID —Å–æ–±—ã—Ç–∏—è
        :return: —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            problems = self.zapi.problem.get(
                output='extend',
                selectAcknowledges='extend',
                eventids=event_id,
                sortfield=['eventid'],
                sortorder='DESC'
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {problems}")
            
            if problems and problems[0].get('acknowledges'):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(problems[0]['acknowledges'])} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
                for ack in problems[0]['acknowledges']:
                    logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {ack.get('message')} ({ack.get('clock')})")
                return problems[0]['acknowledges']
            logger.info(f"–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–±—ã—Ç–∏—é {event_id}: {e}", exc_info=True)
            return []

    def get_problems(self, hours=2, min_severity=2):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        :param hours: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        :param min_severity: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
        :return: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        """
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ >= {min_severity}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            problems = self.zapi.problem.get(
                output='extend',
                selectAcknowledges='extend',
                selectTags='extend',
                recent=True,
                sortfield=['eventid'],
                sortorder='DESC',
                time_from=get_moscow_time_from_hours(hours),
                severity_gte=min_severity
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(problems)} –ø—Ä–æ–±–ª–µ–º")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–µ–≥–∞–º
            filtered_problems = []
            for problem in problems:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –ø—Ä–æ–±–ª–µ–º—ã
                    problem_tags = self.zapi.event.get(
                        output=['eventid', 'tags'],
                        eventids=[problem['eventid']],
                        selectTags=['tag', 'value']
                    )
                    
                    if problem_tags and problem_tags[0].get('tags'):
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        problem_tag_names = [f"{tag['tag']}: {tag['value']}" for tag in problem_tags[0]['tags']]
                        logger.info(f"–¢–µ–≥–∏ –ø—Ä–æ–±–ª–µ–º—ã {problem['eventid']}: {problem_tag_names}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ–±–ª–µ–º—ã —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π
                        has_included_tag = False
                        for problem_tag in problem_tag_names:
                            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
                            normalized_problem_tag = problem_tag.strip().lower()
                            for included_tag in INCLUDED_TAGS:
                                normalized_included_tag = included_tag.strip().lower()
                                if normalized_problem_tag == normalized_included_tag:
                                    has_included_tag = True
                                    logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ {problem['eventid']} –≤–∫–ª—é—á–µ–Ω–∞ (—Ç–µ–≥: {problem_tag})")
                                    break
                            if has_included_tag:
                                break
                        
                        if has_included_tag:
                            filtered_problems.append(problem)
                        else:
                            logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ {problem['eventid']} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç —Ç–µ–≥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π)")
                    else:
                        logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ {problem['eventid']} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç —Ç–µ–≥–æ–≤)")
                        continue
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã {problem.get('eventid')}: {e}", exc_info=True)
                    continue
            
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_problems)} –ø—Ä–æ–±–ª–µ–º –∏–∑ {len(problems)}")
            return filtered_problems
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º: {e}", exc_info=True)
            return []

    def get_unacknowledged_events(self, hours=2, min_severity=1):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        :param hours: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        :param min_severity: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (1 - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        :return: —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        """
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ >= {min_severity}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            problems = self.zapi.problem.get(
                output='extend',
                selectAcknowledges='extend',
                selectTags='extend',
                recent=True,
                acknowledged=False,  # –¢–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
                sortfield=['eventid'],
                sortorder='DESC',
                time_from=get_moscow_time_from_hours(hours),
                severity_min=min_severity,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (1)
                evaltype=2,  # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò –º–µ–∂–¥—É —É—Å–ª–æ–≤–∏—è–º–∏
                tags=[
                    {'tag': 'scope', 'value': 'capacity', 'operator': 0},  # equals
                    {'tag': 'scope', 'value': 'performance', 'operator': 0},
                    {'tag': 'scope', 'value': 'notice', 'operator': 0},
                    {'tag': 'scope', 'value': 'security', 'operator': 0},
                    {'tag': 'scope', 'value': 'availability', 'operator': 0},
                    {'tag': 'component', 'value': 'fra', 'operator': 0},
                    {'tag': 'oracle', 'value': 'blocks', 'operator': 0},
                    {'tag': 'transaction', 'operator': 2},  # exists
                    {'tag': 'archive_log_depth', 'operator': 2},
                    {'tag': 'vimis', 'value': 'availability', 'operator': 0},
                    {'tag': 'remd', 'value': 'os', 'operator': 0},
                    {'tag': 'remd', 'value': 'job_status', 'operator': 0},
                    {'tag': 'remd', 'value': 'all_success', 'operator': 0},
                    {'tag': 'remd', 'value': 'availability', 'operator': 0},
                    {'tag': 'epgu', 'value': 'session', 'operator': 0},
                    {'tag': 'epgu', 'value': 'availability', 'operator': 0},
                    {'tag': 'remdfer', 'value': 'notice', 'operator': 0}
                ],
                selectSuppressionData='extend',  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–∏
                selectInventory='extend',  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
                selectHosts=['host', 'name', 'hostid'],  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–∞—Ö
                expandDescription=True,  # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –º–∞–∫—Ä–æ—Å—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                expandComment=True,  # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –º–∞–∫—Ä–æ—Å—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
                expandExpression=True  # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –º–∞–∫—Ä–æ—Å—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(problems)} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
            return problems
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
            return []

    def get_recent_problems(self, hours=2, min_severity=2):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
        :param hours: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        :param min_severity: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
        :return: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        """
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ >= {min_severity}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            problems = self.zapi.problem.get(
                output='extend',
                selectAcknowledges='extend',
                selectTags='extend',
                recent=True,
                sortfield=['eventid'],
                sortorder='DESC',
                time_from=get_moscow_time_from_hours(hours),
                severity_gte=min_severity
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(problems)} –ø—Ä–æ–±–ª–µ–º")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–µ–≥–∞–º
            filtered_problems = []
            for problem in problems:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –ø—Ä–æ–±–ª–µ–º—ã
                    problem_tags = self.zapi.event.get(
                        output=['eventid', 'tags'],
                        eventids=[problem['eventid']],
                        selectTags=['tag', 'value']
                    )
                    
                    if problem_tags and problem_tags[0].get('tags'):
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        problem_tag_names = [f"{tag['tag']}: {tag['value']}" for tag in problem_tags[0]['tags']]
                        logger.info(f"–¢–µ–≥–∏ –ø—Ä–æ–±–ª–µ–º—ã {problem['eventid']}: {problem_tag_names}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ–±–ª–µ–º—ã —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π
                        has_included_tag = False
                        for problem_tag in problem_tag_names:
                            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
                            normalized_problem_tag = problem_tag.strip().lower()
                            for included_tag in INCLUDED_TAGS:
                                normalized_included_tag = included_tag.strip().lower()
                                if normalized_problem_tag == normalized_included_tag:
                                    has_included_tag = True
                                    logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ {problem['eventid']} –≤–∫–ª—é—á–µ–Ω–∞ (—Ç–µ–≥: {problem_tag})")
                                    break
                            if has_included_tag:
                                break
                        
                        if has_included_tag:
                            filtered_problems.append(problem)
                        else:
                            logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ {problem['eventid']} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç —Ç–µ–≥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π)")
                    else:
                        logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ {problem['eventid']} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç —Ç–µ–≥–æ–≤)")
                        continue
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã {problem.get('eventid')}: {e}", exc_info=True)
                    continue
            
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_problems)} –ø—Ä–æ–±–ª–µ–º –∏–∑ {len(problems)}")
            return filtered_problems
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º: {e}", exc_info=True)
            return []

    def acknowledge_event(self, event_id: str, message: str = "") -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Zabbix
        
        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏–µ
            event = self.zapi.event.get(
                eventids=event_id,
                output=['eventid', 'acknowledged']
            )
            
            if not event:
                logger.error(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            if event[0]['acknowledged'] == '1':
                logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
                if message:
                    self.zapi.event.acknowledge(
                        eventids=[event_id],
                        action=6,  # 6 = close problem
                        message=message
                    )
                return True
            
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            self.zapi.event.acknowledge(
                eventids=[event_id],
                action=6,  # 6 = close problem
                message=message
            )
            logger.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}", exc_info=True)
            return False

    def get_host_problems(self, host_id, hours=12, min_severity=2):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
        :param host_id: ID —Ö–æ—Å—Ç–∞
        :param hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)
        :param min_severity: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (0-5)
        """
        try:
            time_from = int((datetime.now() - timedelta(hours=hours)).timestamp())
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ö–æ—Å—Ç–∞ {host_id} (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤, min_severity={min_severity})")
            
            problems = self.zapi.problem.get(
                output='extend',
                selectHosts=['host'],
                hostids=[host_id],
                time_from=time_from,
                sortfield=['eventid'],
                sortorder='DESC'
            )
            
            filtered_problems = [
                problem for problem in problems 
                if int(problem.get('severity', '0')) >= min_severity
            ]
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(problems)} –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ö–æ—Å—Ç–∞ {host_id}, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_problems)} –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏")
            return filtered_problems
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ö–æ—Å—Ç–∞ {host_id}: {e}", exc_info=True)
            return []

    def get_acknowledged_events(self, hours=2, min_severity=2):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        :param hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        :param min_severity: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (0-5)
        """
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º timestamp –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time_from = int((datetime.now() - timedelta(hours=hours)).timestamp())
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤, min_severity={min_severity})")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = self.zapi.event.get(
                output='extend',
                selectHosts=['host'],
                acknowledged=True,
                time_from=time_from,
                sortfield=['eventid'],
                sortorder='DESC'
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Zabbix")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
            filtered_events = [
                event for event in events 
                if int(event.get('severity', '0')) >= min_severity
            ]
            
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_events)} —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º hostid –∫ —Å–æ–±—ã—Ç–∏—è–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            for event in filtered_events:
                if 'hostid' not in event:
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ hostid –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.get('eventid')}")
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ö–æ—Å—Ç
                    host = self.zapi.host.get(
                        output=['hostid'],
                        hostids=[event['hosts'][0]['hostid']],
                        limit=1
                    )
                    if host:
                        event['hostid'] = host[0]['hostid']
                        logger.debug(f"–ù–∞–π–¥–µ–Ω hostid: {host[0]['hostid']}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö–æ—Å—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.get('eventid')}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–±—ã—Ç–∏—é
                comments = self.get_event_comments(event['eventid'])
                event['comments'] = comments
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–±—ã—Ç–∏—é {event['eventid']}")
            
            return filtered_events
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
            return [] 