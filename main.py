import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, ADMIN_IDS, EVENT_CHECK_INTERVAL, EVENT_REMINDER_INTERVAL
from zabbix_client import ZabbixClient
import redis
import socket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('zabbix_bot.log')
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
logging.getLogger('aiogram').setLevel(logging.INFO)
logging.getLogger('pyzabbix').setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = redis.Redis(
    host='zabbix-bot-redis',
    port=6379,
    db=0,
    decode_responses=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Zabbix
zabbix = ZabbixClient()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
unacknowledged_events = {}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (2 = Warning)
MIN_SEVERITY = 2

# –ö–ª—é—á –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ Redis
LOCK_KEY = 'zabbix_bot_lock'

# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
REALTIME_EVENTS_KEY = 'realtime_events_enabled'

def get_lock_value():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    return f"{socket.gethostname()}:{os.getpid()}"

def check_bot_state():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Redis"""
    try:
        lock_value = redis_client.get(LOCK_KEY)
        if lock_value:
            hostname, pid = lock_value.split(':')
            if hostname == socket.gethostname():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    os.kill(int(pid), 0)
                    return True
                except OSError:
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    redis_client.delete(LOCK_KEY)
                    return False
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

def set_bot_state(state):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    try:
        if state:
            redis_client.set(LOCK_KEY, get_lock_value(), ex=60)  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
        else:
            redis_client.delete(LOCK_KEY)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

async def refresh_lock():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    while True:
        try:
            if redis_client.get(LOCK_KEY) == get_lock_value():
                redis_client.set(LOCK_KEY, get_lock_value(), ex=60)
            await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            await asyncio.sleep(5)

def is_realtime_events_enabled():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    return redis_client.get(REALTIME_EVENTS_KEY) == '1'

def toggle_realtime_events():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    current_state = is_realtime_events_enabled()
    new_state = '0' if current_state else '1'
    redis_client.set(REALTIME_EVENTS_KEY, new_state)
    return new_state == '1'

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id not in ADMIN_IDS:
        return
        
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ü—Ä–æ–±–ª–µ–º—ã", callback_data="problems"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="unacknowledged")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="acknowledged")
        ],
        [
            InlineKeyboardButton(text="üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ", callback_data="set_duty")
        ],
        [
            InlineKeyboardButton(
                text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + ("–í–ö–õ" if is_realtime_events_enabled() else "–í–´–ö–õ"),
                callback_data="toggle_realtime"
            )
        ]
    ])
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Zabbix.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/problems - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "/unacknowledged - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "/acknowledged - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "/set_duty –§–∞–º–∏–ª–∏—è –ò.–û. - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ",
        reply_markup=keyboard
    )

@dp.message(Command("problems"))
async def cmd_problems(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏–∑ Zabbix...")
        problems = zabbix.get_problems(hours=2, min_severity=MIN_SEVERITY)
        
        if not problems:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞")
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞.")
            return
            
        for problem in problems:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ
                host_info = zabbix.zapi.host.get(
                    hostids=problem.get('hostid'),
                    output=['host']
                )
                if host_info:
                    host_name = host_info[0]['host']
                    severity = problem.get('severity', '0')
                    severity_name = zabbix.get_severity_name(severity)
                    event_time = datetime.fromtimestamp(int(problem.get('clock', 0))).strftime('%H:%M:%S %Y.%m.%d')
                    
                    message_text = (
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem.get('name', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                        f"–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {event_time}\n"
                        f"–£–∑–µ–ª —Å–µ—Ç–∏: {host_name}\n"
                        f"–í–∞–∂–Ω–æ—Å—Ç—å: {severity_name}\n"
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if problem.get('comments'):
                        for comment in problem['comments']:
                            comment_time = datetime.fromtimestamp(int(comment.get('clock', 0))).strftime('%H:%M:%S %Y.%m.%d')
                            message_text += f"‚Ä¢ {comment.get('message', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')} ({comment_time})\n"
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                callback_data=f"ack_{problem['eventid']}"
                            ),
                            InlineKeyboardButton(
                                text="üí¨ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º",
                                callback_data=f"ack_comment_{problem['eventid']}"
                            )
                        ]
                    ])
                    
                    await message.answer(message_text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–±–ª–µ–º—ã {problem.get('objectid')}: {e}", exc_info=True)
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_problems: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("unacknowledged"))
async def cmd_unacknowledged(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
        events = zabbix.get_unacknowledged_events(hours=2, min_severity=MIN_SEVERITY)
        
        if not events:
            logger.info("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞")
            await message.answer("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞.")
            return
        
        for event in events:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ
                host_info = zabbix.zapi.host.get(
                    hostids=event.get('hostid'),
                    output=['host']
                )
                if host_info:
                    host_name = host_info[0]['host']
                    severity = event.get('severity', '0')
                    severity_name = zabbix.get_severity_name(severity)
                    event_time = datetime.fromtimestamp(int(event.get('clock', 0))).strftime('%H:%M:%S %Y.%m.%d')
                    
                    message_text = (
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {event.get('name', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                        f"–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {event_time}\n"
                        f"–£–∑–µ–ª —Å–µ—Ç–∏: {host_name}\n"
                        f"–í–∞–∂–Ω–æ—Å—Ç—å: {severity_name}\n"
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if event.get('comments'):
                        for comment in event['comments']:
                            comment_time = datetime.fromtimestamp(int(comment.get('clock', 0))).strftime('%H:%M:%S %Y.%m.%d')
                            message_text += f"‚Ä¢ {comment.get('message', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')} ({comment_time})\n"
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                callback_data=f"ack_{event['eventid']}"
                            ),
                            InlineKeyboardButton(
                                text="üí¨ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º",
                                callback_data=f"ack_comment_{event['eventid']}"
                            )
                        ]
                    ])
                    
                    await message.answer(message_text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event.get('eventid')}: {e}", exc_info=True)
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_unacknowledged: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("set_duty"))
async def cmd_set_duty(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /set_duty –§–∞–º–∏–ª–∏—è –ò.–û.
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_duty –§–∞–º–∏–ª–∏—è –ò.–û.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
    zabbix.current_duty_officer = parts[1]
    await message.answer(f"–¢–µ–∫—É—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {zabbix.current_duty_officer}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
comment_states = {}

@dp.callback_query(lambda c: c.data.startswith('ack_'))
async def process_acknowledge(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        data = callback_query.data.split('_')
        event_id = data[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π
        if not zabbix.current_duty_officer:
            await callback_query.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_duty")
            return
        
        if len(data) == 2:  # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_message = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–∂—É—Ä–Ω—ã–π {zabbix.current_duty_officer}"
            
            if zabbix.acknowledge_event(event_id, confirm_message):
                await callback_query.answer("–°–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                            callback_data=f"ack_comment_{event_id}"
                        )
                    ]
                ])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                new_text = callback_query.message.text + f"\n‚úÖ {confirm_message}"
                await callback_query.message.edit_text(new_text, reply_markup=keyboard)
            else:
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        elif len(data) == 3 and data[1] == 'comment':  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            event_id = data[2]
            comment_states[callback_query.from_user.id] = event_id
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            await callback_query.message.edit_text(
                callback_query.message.text + "\n\nüí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                reply_markup=None
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_acknowledge: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º"""
    if message.from_user.id not in ADMIN_IDS:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if message.from_user.id in comment_states:
        event_id = comment_states[message.from_user.id]
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π
            if not zabbix.current_duty_officer:
                await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_duty")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_message = f"–î–µ–∂—É—Ä–Ω—ã–π {zabbix.current_duty_officer}: {message.text}"
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            if zabbix.acknowledge_event(event_id, confirm_message):
                await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        del comment_states[message.from_user.id]
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏–µ–º
    if message.reply_to_message and message.reply_to_message.text and ('üîó' in message.reply_to_message.text or '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' in message.reply_to_message.text or 'üí¨ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º' in message.reply_to_message.text):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π
            if not zabbix.current_duty_officer:
                await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_duty")
                return
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º event_id –∏–∑ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∏–∑ callback_data
            text = message.reply_to_message.text
            if 'üîó' in text:
                url_start = text.find('üîó') + 1
                url = text[url_start:].strip()
                event_id = url.split('/')[-1]
            else:
                # –ò—â–µ–º event_id –≤ callback_data –∫–Ω–æ–ø–æ–∫
                for row in message.reply_to_message.reply_markup.inline_keyboard:
                    for button in row:
                        if button.callback_data.startswith('ack_'):
                            event_id = button.callback_data.split('_')[-1]
                            break
                    if event_id:
                        break
                if not event_id:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–±—ã—Ç–∏—è")
                    return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if message.text:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                confirm_message = f"–î–µ–∂—É—Ä–Ω—ã–π {zabbix.current_duty_officer}: {message.text}"
            else:
                # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç
                confirm_message = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–∂—É—Ä–Ω—ã–π {zabbix.current_duty_officer}"
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            if zabbix.acknowledge_event(event_id, confirm_message):
                await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

@dp.callback_query(lambda c: c.data == "acknowledged")
async def process_acknowledged_button(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    try:
        await callback_query.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = zabbix.get_acknowledged_events(hours=2, min_severity=MIN_SEVERITY)
        
        if not events:
            await callback_query.message.answer("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞")
            return
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ö–æ—Å—Ç–∞–º
        host_events = zabbix.group_events_by_host(events)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞):\n\n"
        
        for host, host_events_list in host_events.items():
            for event in host_events_list:
                severity = zabbix.get_severity_name(event.get('severity', '0'))
                event_time = datetime.fromtimestamp(int(event.get('clock', 0))).strftime('%H:%M:%S %Y.%m.%d')
                
                response += f"–ü—Ä–æ–±–ª–µ–º–∞: {event.get('name', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                response += f"–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {event_time}\n"
                response += f"–£–∑–µ–ª —Å–µ—Ç–∏: {host}\n"
                response += f"–í–∞–∂–Ω–æ—Å—Ç—å: {severity}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if event.get('comments'):
                    response += "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                    for comment in event['comments']:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
                        comment_time = datetime.fromtimestamp(int(comment['clock']))
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        formatted_time = comment_time.strftime("%d.%m.%Y %H:%M")
                        response += f"‚Ä¢ {formatted_time} - {comment['message']}\n"
                else:
                    response += "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                            callback_data=f"ack_comment_{event['eventid']}"
                        )
                    ]
                ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏–µ–º
                await callback_query.message.answer(response, reply_markup=keyboard)
                response = ""  # –û—á–∏—â–∞–µ–º response –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_acknowledged_button: {e}", exc_info=True)
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")

@dp.callback_query(lambda c: c.data.startswith('ack_comment_'))
async def process_add_comment(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    try:
        event_id = callback_query.data.split('_')[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π
        if not zabbix.current_duty_officer:
            await callback_query.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_duty")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_states[callback_query.from_user.id] = event_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await callback_query.message.edit_text(
            callback_query.message.text + "\n\nüí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_comment: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

@dp.callback_query(lambda c: c.data == "toggle_realtime")
async def process_toggle_realtime(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    try:
        is_enabled = toggle_realtime_events()
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        keyboard = callback_query.message.reply_markup
        for row in keyboard.inline_keyboard:
            for button in row:
                if button.callback_data == "toggle_realtime":
                    button.text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if is_enabled else '–í–´–ö–õ'}"
                    break
            if button.callback_data == "toggle_realtime":
                break
                
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

async def check_events():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not is_realtime_events_enabled():
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                await asyncio.sleep(EVENT_CHECK_INTERVAL)
                continue
                
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
            events = zabbix.get_unacknowledged_events(hours=12, min_severity=MIN_SEVERITY)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
            for event in events:
                event_id = event['eventid']
                if event_id not in unacknowledged_events:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ
                        host_info = zabbix.zapi.host.get(
                            hostids=event.get('hostid'),
                            output=['host']
                        )
                        if host_info:
                            host_name = host_info[0]['host']
                            # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                            unacknowledged_events[event_id] = {
                                'first_seen': datetime.now(),
                                'last_reminder': datetime.now()
                            }
                            
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ {event_id} –¥–ª—è —Ö–æ—Å—Ç–∞ {host_name}")
                            
                            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏
                            message_text = (
                                f"üîî –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!\n"
                                f"–•–æ—Å—Ç: {host_name}\n"
                                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.get('name', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                                f"–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: {zabbix.get_severity_name(event.get('severity', '0'))}"
                            )
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                        callback_data=f"ack_{event_id}"
                                    ),
                                    InlineKeyboardButton(
                                        text="üí¨ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º",
                                        callback_data=f"ack_comment_{event_id}"
                                    )
                                ]
                            ])
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                            for admin_id in ADMIN_IDS:
                                try:
                                    await bot.send_message(
                                        admin_id,
                                        message_text,
                                        reply_markup=keyboard
                                    )
                                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}", exc_info=True)
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    last_reminder = unacknowledged_events[event_id]['last_reminder']
                    if datetime.now() - last_reminder > timedelta(seconds=EVENT_REMINDER_INTERVAL):
                        try:
                            host_info = zabbix.zapi.host.get(
                                hostids=event.get('hostid'),
                                output=['host']
                            )
                            if host_info:
                                host_name = host_info[0]['host']
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ {event_id} –¥–ª—è —Ö–æ—Å—Ç–∞ {host_name}")
                                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                for admin_id in ADMIN_IDS:
                                    try:
                                        await bot.send_message(
                                            admin_id,
                                            f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏!\n"
                                            f"–•–æ—Å—Ç: {host_name}\n"
                                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.get('name', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
                                        )
                                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                                unacknowledged_events[event_id]['last_reminder'] = datetime.now()
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}", exc_info=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}", exc_info=True)
        
        await asyncio.sleep(EVENT_CHECK_INTERVAL)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
def is_bot_running():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ Redis
        return redis_client.exists('zabbix_bot_running')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def set_bot_running():
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ 30 —Å–µ–∫—É–Ω–¥
        redis_client.setex('zabbix_bot_running', 30, '1')
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def clear_bot_running():
    try:
        redis_client.delete('zabbix_bot_running')
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
help_text = """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/problems - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
/unacknowledged - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
/acknowledged - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
/set_duty –§–∞–º–∏–ª–∏—è –ò.–û. - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ"""

async def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        if is_bot_running():
            logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
        if not set_bot_running():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
            
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not redis_client.get(REALTIME_EVENTS_KEY):
            redis_client.set(REALTIME_EVENTS_KEY, '1')
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–±—ã—Ç–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(check_events())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
        clear_bot_running()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main()) 